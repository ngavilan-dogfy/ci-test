name: Trunk-Based CI/CD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: true

jobs:
  # Continuous Integration
  ci:
    name: Continuous Integration
    uses: ./.github/workflows/ci.yml

  # Build and Push Docker Images (only on main branch)
  build-staging:
    name: Build Staging Image
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: ci
    uses: ./.github/workflows/build-push.yml
    with:
      environment: staging

  build-production:
    name: Build Production Image
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: ci
    uses: ./.github/workflows/build-push.yml
    with:
      environment: production

  # Deploy to Staging
  deploy-staging:
    name: Deploy to Staging
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: build-staging
    uses: ./.github/workflows/deploy.yml
    with:
      environment: staging
      image-url: ${{ needs.build-staging.outputs.image-url }}

  # Deploy to Production (requires manual approval)
  deploy-production:
    name: Deploy to Production
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: [build-production, deploy-staging]
    uses: ./.github/workflows/deploy.yml
    with:
      environment: production
      image-url: ${{ needs.build-production.outputs.image-url }}

  # Production Traffic Rollout
  production-rollout:
    name: Production Traffic Rollout
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    needs: deploy-production
    uses: ./.github/workflows/production-rollout.yml
    with:
      service-url: ${{ needs.deploy-production.outputs.service-url }}

  # Deployment Summary
  deployment-summary:
    name: Deployment Summary
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production, production-rollout]
    if: always() && github.ref == 'refs/heads/main' && github.event_name == 'push'
    
    steps:
    - name: Generate Deployment Summary
      run: |
        echo "## 🚀 Deployment Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [[ "${{ needs.deploy-staging.result }}" == "success" ]]; then
          echo "✅ **Staging**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
        else
          echo "❌ **Staging**: Deployment failed" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.deploy-production.result }}" == "success" ]]; then
          echo "✅ **Production**: Deployed successfully" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.deploy-production.result }}" == "failure" ]]; then
          echo "❌ **Production**: Deployment failed" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.deploy-production.result }}" == "skipped" ]]; then
          echo "⏭️ **Production**: Deployment skipped" >> $GITHUB_STEP_SUMMARY
        else
          echo "⏳ **Production**: Deployment pending approval" >> $GITHUB_STEP_SUMMARY
        fi
        
        if [[ "${{ needs.production-rollout.result }}" == "success" ]]; then
          echo "✅ **Traffic Rollout**: Completed successfully" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.production-rollout.result }}" == "failure" ]]; then
          echo "❌ **Traffic Rollout**: Failed" >> $GITHUB_STEP_SUMMARY
        elif [[ "${{ needs.production-rollout.result }}" == "skipped" ]]; then
          echo "⏭️ **Traffic Rollout**: Skipped" >> $GITHUB_STEP_SUMMARY
        fi
        
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Commit**: ${{ github.sha }}" >> $GITHUB_STEP_SUMMARY
        echo "**Branch**: ${{ github.ref_name }}" >> $GITHUB_STEP_SUMMARY
        echo "**Triggered by**: ${{ github.actor }}" >> $GITHUB_STEP_SUMMARY
