name: Deploy to Cloud Run

on:
  workflow_call:
    inputs:
      environment:
        required: true
        type: string
        description: 'Target environment (staging/production)'
      image-url:
        required: true
        type: string
        description: 'Docker image URL to deploy'
    outputs:
      service-url:
        description: 'Cloud Run service URL'
        value: ${{ jobs.deploy.outputs.service-url }}
    secrets:
      DATABASE_URL:
        required: false
      REDIS_URL:
        required: false
      SENTRY_DSN:
        required: false

env:
  # Google Cloud Configuration
  PROJECT_ID: toolshock-pro
  PROJECT_NUMBER: 598100911525
  REGION: us-central1
  WIF_PROVIDER: projects/598100911525/locations/global/workloadIdentityPools/github-pool/providers/github-provider
  SERVICE_ACCOUNT: github-sa@toolshock-pro.iam.gserviceaccount.com

jobs:
  deploy:
    name: Deploy to ${{ inputs.environment }}
    runs-on: ubuntu-latest
    environment: ${{ inputs.environment }}
    
    outputs:
      service-url: ${{ steps.deploy.outputs.service-url }}
    
    permissions:
      contents: read
      id-token: write
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    # Authenticate to Google Cloud
    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v2
      with:
        workload_identity_provider: ${{ env.WIF_PROVIDER }}
        service_account: ${{ env.SERVICE_ACCOUNT }}
    
    # Deploy to Cloud Run using official action
    - name: Deploy to Cloud Run
      id: deploy
      uses: google-github-actions/deploy-cloudrun@v2
      with:
        service: ci-test-${{ inputs.environment }}
        image: ${{ inputs.image-url }}
        region: ${{ env.REGION }}
        flags: |
          --allow-unauthenticated
          --port=3000
          --memory=512Mi
          --cpu=1
          --min-instances=0
          --max-instances=5
          --concurrency=80
          --timeout=300
        env_vars: |
          NODE_ENV=${{ inputs.environment }}
          PORT=3000
        secrets: |
          DATABASE_URL=${{ secrets.DATABASE_URL }}
          REDIS_URL=${{ secrets.REDIS_URL }}
          SENTRY_DSN=${{ secrets.SENTRY_DSN }}
    
    # Wait for service readiness
    - name: Wait for service readiness
      run: |
        echo "‚è≥ Waiting for service to be ready..."
        SERVICE_URL="${{ steps.deploy.outputs.service-url }}"
        
        MAX_ATTEMPTS=30
        ATTEMPT=1
        
        while [[ $ATTEMPT -le $MAX_ATTEMPTS ]]; do
          if curl -f -s "${SERVICE_URL}/health" > /dev/null; then
            echo "‚úÖ Service is ready at: ${SERVICE_URL}"
            break
          fi
          
          echo "Attempt $ATTEMPT/$MAX_ATTEMPTS - Service not ready, waiting 10s..."
          sleep 10
          ((ATTEMPT++))
        done
        
        if [[ $ATTEMPT -gt $MAX_ATTEMPTS ]]; then
          echo "‚ùå Service failed to become ready after $MAX_ATTEMPTS attempts"
          exit 1
        fi

  # Post-deployment tests
  test-deployment:
    name: Test Deployment
    runs-on: ubuntu-latest
    needs: deploy
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run smoke tests
      env:
        TEST_BASE_URL: ${{ needs.deploy.outputs.service-url }}
        NODE_ENV: ${{ inputs.environment }}
      run: |
        echo "üí® Running smoke tests against: $TEST_BASE_URL"
        npm run test:smoke
    
    - name: Run integration tests
      if: inputs.environment == 'staging'
      env:
        TEST_BASE_URL: ${{ needs.deploy.outputs.service-url }}
        NODE_ENV: ${{ inputs.environment }}
      run: |
        echo "üß™ Running integration tests against: $TEST_BASE_URL"
        npm run test:integration
